<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketIOClient</name>
    </assembly>
    <members>
        <member name="T:SocketIOClient.Messages.ClientAckMessage">
            <summary>
            The server calls the client's callback
            </summary>
        </member>
        <member name="T:SocketIOClient.Messages.ClientBinaryAckMessage">
            <summary>
            The server calls the client's callback with binary
            </summary>
        </member>
        <member name="T:SocketIOClient.Messages.ServerAckMessage">
            <summary>
            The client calls the server's callback
            </summary>
        </member>
        <member name="T:SocketIOClient.Messages.ServerBinaryAckMessage">
            <summary>
            The client calls the server's callback with binary
            </summary>
        </member>
        <member name="M:SocketIOClient.Routers.Router.StartPing(System.Threading.CancellationToken)">
            <summary>
            <para>Eio3 ping is sent by the client</para>
            <para>Eio4 ping is sent by the server</para>
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SocketIOClient.SocketIO">
            <summary>
            socket.io client class
            </summary>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.String)">
            <summary>
            Create SocketIO object with default options
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.Uri)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.String,SocketIOClient.SocketIOOptions)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
            <param name="options"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.Uri,SocketIOClient.SocketIOOptions)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
            <param name="options"></param>
        </member>
        <member name="P:SocketIOClient.SocketIO.Id">
            <summary>
            An unique identifier for the socket session. Set after the connect event is triggered, and updated after the reconnect event.
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Connected">
            <summary>
            Whether or not the socket is connected to the server.
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Attempts">
            <summary>
            Gets current attempt of reconnection.
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Disconnected">
            <summary>
            Whether or not the socket is disconnected from the server.
            </summary>
        </member>
        <member name="E:SocketIOClient.SocketIO.OnReconnected">
            <summary>
            Fired upon a successful reconnection.
            </summary>
        </member>
        <member name="E:SocketIOClient.SocketIO.OnReconnectAttempt">
            <summary>
            Fired upon an attempt to reconnect.
            </summary>
        </member>
        <member name="E:SocketIOClient.SocketIO.OnReconnectError">
            <summary>
            Fired upon a reconnection attempt error.
            </summary>
        </member>
        <member name="E:SocketIOClient.SocketIO.OnReconnectFailed">
            <summary>
            Fired when couldnâ€™t reconnect within reconnectionAttempts
            </summary>
        </member>
        <member name="M:SocketIOClient.SocketIO.On(System.String,System.Action{SocketIOClient.SocketIOResponse})">
            <summary>
            Register a new handler for the given event.
            </summary>
            <param name="eventName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.Off(System.String)">
            <summary>
            Unregister a new handler for the given event.
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.EmitAsync(System.String,System.Object[])">
            <summary>
            Emits an event to the socket
            </summary>
            <param name="eventName"></param>
            <param name="data">Any other parameters can be included. All serializable datastructures are supported, including byte[]</param>
            <returns></returns>
        </member>
        <member name="M:SocketIOClient.SocketIO.EmitAsync(System.String,System.Action{SocketIOClient.SocketIOResponse},System.Object[])">
            <summary>
            Emits an event to the socket
            </summary>
            <param name="eventName"></param>
            <param name="ack">will be called with the server answer.</param>
            <param name="data">Any other parameters can be included. All serializable datastructures are supported, including byte[]</param>
            <returns></returns>
        </member>
        <member name="P:SocketIOClient.SocketIOOptions.Reconnection">
            <summary>
            Whether to allow reconnection if accidentally disconnected
            </summary>
        </member>
        <member name="M:SocketIOClient.Transport.WebSocketTransport.ConnectAsync(System.Uri)">
            <exception cref="T:System.Net.WebSockets.WebSocketException"></exception>
        </member>
        <member name="M:SocketIOClient.Transport.WebSocketTransport.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException"></exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException"></exception>
        </member>
        <member name="M:SocketIOClient.Transport.WebSocketTransport.SendAsync(System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException"></exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException"></exception>
        </member>
    </members>
</doc>
