<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketIOClient</name>
    </assembly>
    <members>
        <member name="T:SocketIOClient.SocketIO">
            <summary>
            socket.io client class
            </summary>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.String)">
            <summary>
            Create SocketIO object with default options
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.Uri)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.String,SocketIOClient.SocketIOOptions)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
            <param name="options"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor(System.Uri,SocketIOClient.SocketIOOptions)">
            <summary>
            Create SocketIO object with options
            </summary>
            <param name="uri"></param>
            <param name="options"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.#ctor">
            <summary>
            Create SocketIO object with default options
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Id">
            <summary>
            An unique identifier for the socket session. Set after the connect event is triggered, and updated after the reconnect event.
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Connected">
            <summary>
            Whether or not the socket is connected to the server.
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIO.Disconnected">
            <summary>
            Whether or not the socket is disconnected from the server.
            </summary>
        </member>
        <member name="M:SocketIOClient.SocketIO.ConnectAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocketIOClient.SocketIO.On(System.String,System.Action{SocketIOClient.SocketIOResponse})">
            <summary>
            Register a new handler for the given event.
            </summary>
            <param name="eventName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.Off(System.String)">
            <summary>
            Unregister a new handler for the given event.
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:SocketIOClient.SocketIO.EmitAsync(System.String,System.Object[])">
            <summary>
            Emits an event to the socket
            </summary>
            <param name="eventName"></param>
            <param name="data">Any other parameters can be included. All serializable datastructures are supported, including byte[]</param>
            <returns></returns>
        </member>
        <member name="M:SocketIOClient.SocketIO.EmitAsync(System.String,System.Action{SocketIOClient.SocketIOResponse},System.Object[])">
            <summary>
            Emits an event to the socket
            </summary>
            <param name="eventName"></param>
            <param name="ack">will be called with the server answer.</param>
            <param name="data">Any other parameters can be included. All serializable datastructures are supported, including byte[]</param>
            <returns></returns>
        </member>
        <member name="P:SocketIOClient.SocketIOOptions.Reconnection">
            <summary>
            Whether to allow reconnection if accidentally disconnected
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIOOptions.AllowedRetryFirstConnection">
            <summary>
            Allow reconnection when the first connection fails.
            Generally speaking, the usage scenario is if the server starts later than the client.
            </summary>
        </member>
        <member name="T:SocketIOClient.WebSocketClient.ClientWebSocket">
            <summary>
            Internally uses 'System.Net.WebSockets.ClientWebSocket' as websocket client
            </summary>
        </member>
        <member name="M:SocketIOClient.WebSocketClient.ClientWebSocket.ConnectAsync(System.Uri)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="options"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Net.WebSockets.WebSocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:SocketIOClient.WebSocketClient.ClientWebSocket.SendMessageAsync(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
            <exception cref="T:SocketIOClient.Exceptions.InvalidSocketStateException"></exception>
        </member>
        <member name="M:SocketIOClient.WebSocketClient.ClientWebSocket.SendMessageAsync(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <exception cref="T:SocketIOClient.Exceptions.InvalidSocketStateException"></exception>
        </member>
    </members>
</doc>
